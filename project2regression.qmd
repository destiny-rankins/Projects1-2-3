---
title: "Predicting The Need For Trachestomy Placement In Infants: A Regression Analysis"
author: "Destiny Rankins"
format: pdf
editor: visual
---

```{r, warning=FALSE, message=FALSE, echo = FALSE}
# load libraries
suppressPackageStartupMessages(library(gtsummary))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(naniar))
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(tinytex))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(mice))
suppressPackageStartupMessages(library(rmarkdown))
suppressPackageStartupMessages(library(corrplot))
suppressPackageStartupMessages(library(ggcorrplot))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(ggpubr))
suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(leaps))
suppressPackageStartupMessages(library(glmnet))
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(stats))
suppressPackageStartupMessages(library(pROC))
suppressPackageStartupMessages(library(DescTools))
```

```{r, warning=FALSE, message=FALSE, echo = FALSE}
# load in the data set
project2 <- read.csv("C:/Users/desti/Downloads/project2.csv", header=TRUE)

# check for duplicates
duplicate_id <- duplicated(project2$record_id)

# remove duplicates
trach_df <- project2[!duplicate_id, ]

# change the variables to factors 
trach_df[,c(2:4, 9:15, 17, 21, 23, 27, 29)] <- lapply(trach_df[,c(2:4, 9:15, 17, 21, 23, 27, 29)], factor)
```

## Abstract

-   **Background:** Bronchopulmonary dysplasia (BPD) is a form of chronic disease that most often affect those born prematurely and need oxygen therapy. Some treatment options include non-invasive respiratory support like cardiac medications and invasive respiratory support where a ventilator is inserted via a tracheostomy. The goal of this study is to develop a regression model to predict the outcome of tracheostomy to guide the indication criteria and timing of tracheostomy placement.

-   **Methods:** This study utilizes data from the BPD Collaborative Registry, a multi-center consortium of interdisciplinary BPD programs located in the United States and Sweden formed to address gaps in evidence and promote research to enhance the care of children with severe forms of BPD. Standard demographic and clinical data are collected at four time points: birth, 36 weeks post-menstrual age (PMA), 44 weeks PMA and discharge information.

-   **Results:** A total of 996 patients were included in the final analysis of the data set. The best model was the logistic regression model. The key variables. This model achieved a Brier Score of 0.065 and AUC O.933 (compared to Brier Score of 0.069 and AUC of 0.932 for the lasso model and Brier Score of 0.075 and AUC of 0.922 for the ridge model).

-   **Conclusions:** The fitted regression models allow for predicting the potential need for a tracheostomy on infants given predictor variables. The findings are intended provide insight into a complex clinical decision-making process.

## Introduction

An estimated 10000 to 15000 newborns develop bronchopulmonary dysplasia (BPD) in the United States every year \[1\]. BPD is a form of chronic lung disease that affects newborns, most often those who are born prematurely and need oxygen therapy \[1\]. BPD is the result of a newborn's lungs not developing normally while the baby is growing in womb, or not developing fully if the baby was born premature \[2\]. The lungs develop around 30-40 weeks and while the condition is a consequence of being born extremely premature, the severity of the disease varies from infant to infant. There is no particular cure for Bronchiopulmonary dysplasia however, there are various treatment options to help support infant's lungs, allowing for them to heal and grow \[1\]. Some of these treatment options include diuretics, bronchiodilators, corticosteroids, viral immunization, and cardiac medications\[1\].

There are varying severity levels used to classify infants with BPD; mild (grade 1), moderate (grade 2), severe (grade 3), and very severe (grade 4). Infants with Grade 2 BPD are defined as those with the need for non-invasive positive pressure at 36 weeks post-menstrual age (PMA) \[3\]. The most severely affected infants (grade 3 BPD) are dependent on a ventilator at 36 week PMA moreover, they have a need for ongoing invasive positive pressure ventilation (IPPV) \[4\]. Infants with severe BPD must be discharged from the hospital on a ventilator. This requires a tracheostomy, a procedure to help air and oxygen reach the lungs by creating an opening into the trachea (windpipe) from outside the neck \[5\]. The surgical opening in the neck allows them to be connected to a ventilator. Up to 12% of infants with severe or grade 3 BPD require a trachesotomy. Some potential benefits of performing tracheostomy include providing a stable airway, improving growth, promoting age-appropriate interactions, and improving participation in developmental care.

There are various risks associated with a tracheostomy including; increased rates of infection in the skin, lungs, or trachea, accidental removal of the tracheostomy tube, and tracheal stenosis where the narrowing of the trachea hinders normal breathing. In addition to the risks associated with a tracheostomy, there are can also be challenges for families to cope with and care for infants with inserted ventilators by tracheostomy. There are potential financial strains, emotional stress and anxiety, disruptions to daily life, and time demands that families may face. Therefore, an accurate predictive model is essential to help clinicians predict the eventual need for tracheostomy in infants with severe BPD. In this study, we aimed to accurately predict the tracheostomy outcome infants by developing three regression models and evaluating their performance capabilities, accuracy, and reliability.

## Methods

#### **Study Participants**

Study participants were drawn from the BPD Collaborative Registry, a multi-center consortium of interdisciplinary BPD programs located in the United States and Sweden formed to address gaps in evidence and promote research to enhance the care of children with severe forms of BPD \[7\]. The registry includes infants whose gestational age is less than 32 weeks and who have severe bronchopulmonary dysplasia (sBPD) (defined by 2001 NHLBI criteria; specifically, FiO2 3 0.3 or positive pressure ventilation (invasive or non-invasive) at 36-weeks PMA)\[7\]. There were a total of thirty standard demographic and clinical variables collected for the data set that included the time points; birth, 36 weeks PMA , 44 weeks PMA, and discharge. The categorical variables in the data set include: the medical center, the mother's race, the mother's ethnicity, the birthing delivery method (vaginal delivery or Cesarean section), prenatal corticosteriods, completed prenatal steroids, maternal chorioamnionitis, infant gender, whether infant was small for gestational age, if the infant received surfactant at any point in the first 72 hours, level of ventilation support at 36 and 44 weeks (0 = no respiratory support or supplemental oxygen, 1 = non-invasive positive pressure, and 2 = invasive positive pressure), if medication for pulmonary hypertension was received at 36 and 44 weeks, if the infant received a tracheostomoy at discharge, and death before discharge. The continuous variables in the data set include: the birth weight in grams, the obstetrical gestational age, the birth length in centimeters, the birth head circumference in centimeters, the infant weight at 36 and 44 weeks, the fraction of inspired oxygen at 36 and 44 weeks, the peak inspiration pressure (cmH20) at 36 and 44 weeks, positive and exploratory pressure (cmH20) at 36 and 44 weeks, and hospital discharge gestational age. For this study, we queried the registry for patients with BPD and complete growth data between January 1 and July 19, 2021. At the time of analysis, 10 BPD Collaborative centers had contributed data meeting study inclusion criteria."

#### **Exploratory Data Analysis**

When observing the demographic statistics from the data in Table 1, we see that most of the maternal participants are non-Hispanic or Latino. Moreover, we see that 59% of the non-Hispanic or Latino maternal participants selected "0" for race and 33% selected American Indian or Alaskan Native. In contrast, 65% of Hispanic maternal participants selected "Asian" for race and 32% is unknown. Since we do not know for sure if an error occurred when creating the code book where "6" is meant to specify "Other" for race or if there was a clerical data entry error in the data set where "0" is a specifier for race, these values were treated as unknown. None of the participants identified as Black or African American, Native Hawaiian or Other Pacific Islander or, White. From Table 2, we observe that there were more males (466) than females (315) that were small for gestational age. The average birth weight was higher for males (838 grams) than females (762 grams). Furthermore, the average weight for infant males was higher at 36 weeks PMA and 44 weeks PMA than for females. In Table 3: Summary of Respiratory Support Variables, we observe the overall average for infants that did not receive respiratory support or supplemental oxygen increase from 12% to 47%. The overall average number of infants that needed non-invasive positive pressure decreased from 61% to 25% for 36 weeks PMA and 44 week PMA, respectively. An average of 260 infants had invasive support for ventilation at 36 weeks PMA and an average of 157 infants had invasive support for ventilation at 44 weeks PMA. From Table 4, we see that most of the participants took prenatal steroids (87%), while we observe an 11% decrease for participants that completed taking the prenatal steroids. In Table 5, we that an average of 145 infants (15%) had a tracheostomy at discharge and an average of 54 infants (5.5%) died before discharge.

```{r, warning=FALSE, message=FALSE, echo = FALSE}
# average birth weight, average birth weight at 36 week, and average weight at 44 weeks
trach_df %>%
  dplyr::select(gender, bw, weight_today.36, weight_today.44) %>%
    tbl_summary(
      by = gender,
      type = all_continuous() ~ "continuous2",
      statistic = all_continuous() ~ c("{mean}"),
      missing_text = "Missing",
      label = list(bw = "Average Birth Weight {g}", 
                  weight_today.36 = "Average Weight at 36 Weeks {g}", 
                  weight_today.44 = "Average Weight at 44 Weeks {g}")) %>%
      add_overall() %>%
      modify_header(label ~ "Variable") %>%
      modify_caption("Average Birth and Infants Weights") %>%
      modify_spanning_header(c("stat_1", "stat_2") ~ "Gender") %>%
      bold_labels()%>%
    tbl_butcher()


# name the values for the mother's race and the mother's ethnicity
trach_df$mother_ethn <- ifelse(trach_df$mat_ethn == 1, 
                               "Hispanic or Latino","Not Hispanic or Latino")
trach_df$mother_race <-
  case_when(
    trach_df$mat_race == 1 ~ "American Indian or Alaskan Native",
    trach_df$mat_race == 2 ~ "Asian",
    trach_df$mat_race == 3 ~ "Black or African American",
    trach_df$mat_race == 4 ~ "Native Hawaiian or Other Pacific Islander",
    trach_df$mat_race == 5 ~ "White",
    trach_df$mat_race == 0 ~ "Unknown")


# table displaying the summary of the mother's race and ethnicity
trach_df %>%
  dplyr::select(mother_race, mother_ethn) %>%
  tbl_summary(
    by = mother_ethn, missing_text = "Missing",
    label = list(mother_race = "Race of Mother")) %>% 
  add_overall() %>%
  modify_header(label ~ " ") %>%
  modify_caption("Maternal Demographics") %>%
  modify_spanning_header(c("stat_1", "stat_2") ~ "Ethnicity of Mother") %>%
  bold_labels() %>%
  tbl_butcher()

# average tracheostomy at discharge and death before discharge
trach_df %>%
  dplyr::select(Trach, Death, gender, prenat_ster, com_prenat_ster, mat_chorio) %>%
  tbl_summary(
    by = gender,
    type = all_continuous() ~ "continuous2",
    statistic = all_continuous() ~ c("{median}"),
    missing_text = "Missing",
    label = list(prenat_ster = "Prenatal Steroids",
                 com_prenat_ster = "Completed Prenatal Steroids",
                 mat_chorio = "Maternal Chorioamnionitis",
                 Trach = "Average Tracheostomy", 
                 Death = "Average Death")) %>% 
  add_overall() %>%
  modify_header(label ~ " ") %>%
  modify_caption("Summary of Steroid Status and Chorioamnionitis") %>%
  modify_spanning_header(c("stat_1", "stat_2") ~ "Gender") %>%
  bold_labels()%>%
  tbl_butcher()

# average tracheostomy at discharge and death before discharge
trach_df %>%
  dplyr::select(Trach, Death, gender) %>%
  tbl_summary(
    by = gender,
    type = all_continuous() ~ "continuous2",
    statistic = all_continuous() ~ c("{median}"),
    missing_text = "Missing",
    label = list(Trach = "Average Tracheostomy", 
                 Death = "Average Death")) %>% 
  add_overall() %>%
  modify_header(label ~ " ") %>%
  modify_caption("Average Tracheostomy and Average Death Outcome") %>%
  modify_spanning_header(c("stat_1", "stat_2") ~ "Gender") %>%
  bold_labels()%>%
  tbl_butcher()
```

```{r, warning=FALSE, message=FALSE, echo = FALSE}
# average tracheostomy at discharge and death before discharge
trach_df %>%
  dplyr::select(gender, ventilation_support_level.36, ventilation_support_level_modified.44, med_ph.36, med_ph.44) %>%
  tbl_summary(
    by = gender,
    type = all_continuous() ~ "continuous2",
    statistic = all_continuous() ~ c("{mean}"),
    missing_text = "Missing",
    label = list(ventilation_support_level.36 = "Ventilation Support Level at 36 Weeks PMA",
                 ventilation_support_level_modified.44 = "Ventilation Support Level at 44 Weeks PMA",
                 med_ph.36 = "Medication for Pulmonary Hypertension at 36 weeks",
                 med_ph.44 = "Medication for Pulmonary Hypertension at 44 weeks")) %>% 
  add_overall() %>%
  modify_header(label ~ " ") %>%
  modify_caption("Summary of Respiratory Support Variables") %>%
  #modify_spanning_header(c("stat_1", "stat_2") ~ "Gender") %>%
  bold_labels()
```

Overall, 13.8% of the data is missing. Furthermore, there are seven variables with more than 40% of missing data. From Table 6, we see a significant amount of infant data that is missing at 44 weeks post-menstrual age. These include the variables for the fraction of inspired oxygen at 44 weeks, the peak inspiratory pressure (cm H20) needed at 44 weeks, weight at 44 weeks, the positive and exploratory pressure (cm H20) needed at 44 weeks, whether the infant received surfactant at any point in the first 72 hours, the ventilation support level at 44 weeks, and whether medication for pulmonary hypertension at 44 weeks was received. This could be the case if the invasive ventilation support was remove before 44 weeks post-menstrual age. After grouping the missing data by the variable for medical center, it appears that a lot of the missing data at 44 weeks is from medical center 2. This can be observed in Table 7. There is also a significant amount of missing data for the variable any_surf, 46% is from medical center 2. This may be the case because practices and procedures can differ between medical centers i.e how different medical centers record data or do medical charting. Based on this assumption, the data could be considered missing not at random where the probability of missing data is systematically related to the hypothetical values that are missing\[6\]. Some medical centers are referral centers, specialty centers, or academic tertiary centers.

```{r, warning=FALSE, message=FALSE, echo = FALSE}
# overall missingness
vis_miss(trach_df)

# missing variable summary for more than 40% missing 
missingness <- trach_df %>%
  miss_var_summary() %>%
  filter(pct_miss >= 40)

#output summary table for variables missing more than 40% 
kable(missingness, caption = "Variables with Significant Missingness",
      align = "l",digits = 3)


# missing variable summary grouped by medical center
#miss <- trach_df %>%
#  group_by(center) %>%
#  miss_var_summary() %>%
#  filter(pct_miss > 0 & n_miss > 20) %>%
#  arrange(pct_miss)

#output summary table for missing variable summary grouped by medical center 
#kable(miss, caption = "Missingness by Medical Center", 
#      align = "l",digits = 3)

# missing variable summary for medical center 2
miss2 <- trach_df %>%
  group_by(center) %>%
  miss_var_summary() %>%
  filter(center == 2 & pct_miss > 0 & n_miss > 20) %>%
  arrange(center)


#output summary table for missing variable summary for medical center 2 
kable(miss2, caption = "Medical Center 2 Missing Variable Summary", 
      align = "l",digits = 3)
```

From the boxplots for continuous independent birth, we observe outliers for when looking at the distributions for birth weight, birth head circumference, birth length, and hospital discharge age by tracheostomy.

```{r, warning=FALSE, message=FALSE, echo = FALSE, include=FALSE}
# histograms for the independent respiratory support variables at 36 weeks
newdata <- na.omit(trach_df) %>%
  dplyr::select(weight_today.36, inspired_oxygen.36, p_delta.36, peep_cm_h2o_modified.36,
         Trach, Death) %>%
  mutate(Tracheostomy = ifelse(Trach == 1, "Yes", "No"))
  #rename("Weight at 36 Weeks" = weight_today.36, 
   #      "Fraction of Inspired Oxygen at 36 weeks" = inspired_oxygen.36,
    #     "Peak Inspiratory Pressure (cmH2O) at 36 weeks" = p_delta.36,
     #    "Positive and exploratory pressure (cm H2O) at 36 weeks" = peep_cm_h2o_modified.36,
      #   "Tracheostomy" = Trach)
par(mar = c(1, 1, 1, 1))
par(mfrow = c(2,2))


for( i in 1:4){
  hist(newdata[,i], main = colnames(newdata)[i], xlab = colnames(newdata)[i], col = 'turquoise4')
  mtext("Figure 1. Histograms for Continuous Independent Respiratory Support Variables
        at 36 Weeks", side = 3, line =  -2.2, outer = TRUE)
}


# histograms for the independent respiratory support variables at 44 weeks
newdata2 <- na.omit(trach_df) %>%
dplyr::select(weight_today.44, inspired_oxygen.44, p_delta.44, peep_cm_h2o_modified.44,
         Trach, Death) %>%
  mutate(Tracheostomy = ifelse(Trach == 1, "Yes", "No"))
  #rename("Weight at 44 Weeks" = weight_today.44, 
   #      "Fraction of Inspired Oxygen at 44 Weeks" = inspired_oxygen.44,
    #     "Peak Inspiratory Pressure (cmH2O) at 44 Weeks" = p_delta.44,
     #    "Positive and exploratory pressure (cm H2O) at 44 Weeks" = peep_cm_h2o_modified.44,
      #   "Tracheostomy" = Trach)
par(mar = c(1, 1, 1, 1))
par(mfrow = c(2,2))
for( i in 1:4){
  hist(newdata2[,i], main = colnames(newdata2)[i], xlab = colnames(newdata2)[i],col = 'turquoise4')
   mtext("Figure 2. Histograms for Continuous Independent Respiratory Support Variables
        at 44 Weeks", side = 3, line =  -2.2, outer = TRUE)
}

# histograms birth weight, birth length, birth head circumference, and gestational age
newdata3 <- na.omit(trach_df) %>%
  dplyr::select(bw, birth_hc, blength, ga, hosp_dc_ga, Trach, Death) %>%
  mutate(Tracheostomy = ifelse(Trach == 1, "Yes", "No"))
  #rename("Birth Weight (g)" = bw, "Birth Head Circumference (cm)" = birth_hc,
   #      "Birth Length (cm)" = blength, "Gestational Age" = ga, 
    #     "Hospital Discharge Gestational Age" = hosp_dc_ga, "Tracheostomy" = Trach)
par(mar = c(1, 1, 1, 1))
par(mfrow = c(3,2))
for( i in 1:5){
  hist(newdata3[,i], main = colnames(newdata3)[i],xlab =colnames(newdata3)[i], col = 'turquoise4')
   mtext("Figure 3. Histograms for Continuous Independent Birth Variables", side = 3, line =  -2.2, outer = TRUE)
}
```

```{r, warning=FALSE, message=FALSE, echo = FALSE}
box_plot <- function(data, x, y, title) {
  ggplot()+
  geom_boxplot(data, mapping = aes({{x}}, {{y}}, fill = {{x}}),color = "black" , outlier.color = "red") +
  #geom_boxplot(data, mapping = aes({{z}}, color = {{z}}), outlier.color = "red") +
    scale_fill_viridis_d() +
    #scale_color_brewer(palette = "Dark2") +
    theme(axis.line = element_line(colour = "black",linewidth=1),
    text = element_text(size=10),
    axis.text = element_text(colour = "black",size = 10,face="bold"),
    axis.title = element_text(size = 10,face="bold"),
    axis.ticks.length=unit(.20, "cm")) +
    #axis.ticks = element_line(colour = "black", linewidth = 1))+
    theme(legend.position = "none") +
    ggtitle(title)
}

# Boxplots for Continuous Independent Birth Variables
aa <- box_plot(newdata3, Tracheostomy, bw, "Birth Weight")
bb <- box_plot(newdata3, Tracheostomy, birth_hc, "Birth Head Circumf.")
cc <- box_plot(newdata3, Tracheostomy, blength, "Birth Length")
dd <- box_plot(newdata3, Tracheostomy, ga, "Gestational Age")
ee <- box_plot(newdata3, Tracheostomy, hosp_dc_ga, "Hospital Discharge Gestational Age")
plot3 <- ggarrange(aa, bb, cc, dd, ee, ncol = 3, nrow = 2)
annotate_figure(plot3, top = text_grob("Boxplots for Continuous Independent Birth Variables", color = "black", face = "bold", size = 14))

```

#### **Model Development**

Three logistic regression models were developed from twenty-six chosen categorical and continuous variables. The categorical variables were converted from character-type variables to factors, allowing for statistical analysis. To handle the missing data, the multiple imputation method using the mice() function was employed to generate five imputed data sets with filled missing values. Each imputed data set was stored in a list to be accessed when fitting the regression models. The logistic model was fit using the glm() function from the stats package where the model of binary outcomes with "family =""binomial" was indicated. The Lasso regression model was fit using the cv.glmnet() function from the glmnet package. Ten-fold cross-validation was implemented by setting "nfolds = 10", "foldid = folds" and, indicating model of binary outcomes with "family ="binomial"". The Ridge model followed the same model-building procedure as described in the Lasso regression. However, setting"alpha = 1", specifies the Lasso method and setting "alpha = 0" in the cv.glmnet() function indicates Ridge regression. This approach helps to identify the coefficients associated with the optimal λ for each imputed set. The average of all coefficients derived from these five imputed sets to were used to predict the outcome of a tracheostomy.

```{r, warning=FALSE, message=FALSE, echo = FALSE}
# subset the data for imputation
trach_subset <- trach_df %>% 
dplyr::select(c(center,bw,ga,blength,birth_hc,del_method,prenat_ster,
com_prenat_ster,mat_chorio,gender,sga,any_surf,weight_today.36,ventilation_support_level.36,inspired_oxygen.36,p_delta.36,peep_cm_h2o_modified.36,med_ph.36,weight_today.44, ventilation_support_level_modified.44,inspired_oxygen.44,p_delta.44,peep_cm_h2o_modified.44,med_ph.44,Trach))

# impute the data set using the mice package
trach_df_mice_out <- mice(trach_subset,m=5,pri =FALSE,seed=10)

# Store each imputed data set
trach_impdf<-vector("list",5)
for (i in 1:5){
  trach_impdf[[i]]<-mice::complete(trach_df_mice_out,i)
}
```

```{r, warning=FALSE, message=FALSE, echo = FALSE}
logistic <- function(df) {
  #' Runs 10-fold CV for lasso and returns corresponding coefficients
  #' @param df, data set
  #' @return coef, coefficients for minimum cv error

  # Matrix form for ordered variables
  x.ord <- model.matrix(Trach ~., data = df)[,-1]
  y.ord <- df$Trach

  # Logistic model
  logistic_mod <- glm(y.ord ~ x.ord, family = "binomial")

  # Get coefficients
  coef <- coef(logistic_mod)
  return(coef)
}

# Find average lasso coefficients over imputed datasets
logistic_coef1 <- logistic(trach_impdf[[1]])
logistic_coef2 <- logistic(trach_impdf[[2]])
logistic_coef3 <- logistic(trach_impdf[[3]])
logistic_coef4 <- logistic(trach_impdf[[4]])
logistic_coef5 <- logistic(trach_impdf[[5]])
logistic_coef <- cbind(logistic_coef1, logistic_coef2, logistic_coef3,
logistic_coef4, logistic_coef5)
avg_coefs_logistic <- apply(logistic_coef, 1, mean)
names(avg_coefs_logistic) <- gsub(pattern = "x.ord", replacement = "", x = names(avg_coefs_logistic))

# Find predicted probabilities on long imputed data (no rounding applied in this case!)
trach_df_long <- mice::complete(trach_df_mice_out,action="long")
x_vars <- model.matrix(Trach~ ., trach_df_long)[,-c(2,3)]
trach_df_long$logistic_score <- x_vars %*% avg_coefs_logistic
mod_logistic <- glm(Trach~logistic_score, data = trach_df_long, family = "binomial")
predict_probs_logistic <- predict(mod_logistic, type="response")
```

```{r, warning=FALSE, message=FALSE, echo = FALSE}
lasso <- function(df) {
  #' Runs 10-fold CV for lasso and returns corresponding coefficients
  #' @param df, data set
  #' @return coef, coefficients for minimum cv error
  
  # Matrix form for ordered variables
  x.ord <- model.matrix(Trach~., data = df)[,-1]
  y.ord <- df$Trach

  # Generate folds
  k <- 10
  set.seed(1) # consistent seeds between imputed data sets
  folds <- sample(1:k, nrow(df), replace=TRUE)

  # Lasso model
  lasso_mod_cv <- cv.glmnet(x.ord, y.ord, nfolds = 10, foldid = folds, 
                            alpha = 1, family = "binomial")
  lasso_mod <- glmnet(x.ord, y.ord, nfolds = 10,
                        alpha = 1, family = "binomial", lambda = lasso_mod_cv$lambda.min)
  # Get coefficients
  coef <- coef(lasso_mod)
  return(coef)
}


# Find average lasso coefficients over imputed datasets
lasso_coef1 <- lasso(trach_impdf[[1]])
lasso_coef2 <- lasso(trach_impdf[[2]])
lasso_coef3 <- lasso(trach_impdf[[3]])
lasso_coef4 <- lasso(trach_impdf[[4]])
lasso_coef5 <- lasso(trach_impdf[[5]])
lasso_coef <- cbind(lasso_coef1, lasso_coef2, lasso_coef3,
lasso_coef4, lasso_coef5)
avg_coefs_lasso <- apply(lasso_coef, 1, mean)

# Find predicted probabilities on long imputed data (no rounding applied in this case!)
trach_df_long <- mice::complete(trach_df_mice_out,action="long")
x_vars <- model.matrix(Trach~. , trach_df_long)[,-c(2,3)]
trach_df_long$lasso_score <- x_vars %*% avg_coefs_lasso
mod_lasso <- glm(Trach~lasso_score, data = trach_df_long, family = "binomial")
predict_probs_lasso <- predict(mod_lasso, type="response")
```

```{r, warning=FALSE, message=FALSE, echo = FALSE}
ridge <- function(df) {
#' Runs 10-fold CV for lasso and returns corresponding coefficients
#' @param df, data set
#' @return coef, coefficients for minimum cv error

# Matrix form for ordered variables
x.ord <- model.matrix(Trach~., data = df)[,-1]
y.ord <- df$Trach

# Generate folds
k <- 10
set.seed(1) # consistent seeds between imputed data sets
folds <- sample(1:k, nrow(df), replace=TRUE)

# Ridge model
ridge_mod <- cv.glmnet(x.ord, y.ord, nfolds = 10, foldid = folds,
alpha = 0, family = "binomial")

# Get coefficients
coef <- coef(ridge_mod, lambda = ridge_mod$lambda.min)
return(coef)
}
# Find average lasso coefficients over imputed datasets
ridge_coef1 <- ridge(trach_impdf[[1]])
ridge_coef2 <- ridge(trach_impdf[[2]])
ridge_coef3 <- ridge(trach_impdf[[3]])
ridge_coef4 <- ridge(trach_impdf[[4]])
ridge_coef5 <- ridge(trach_impdf[[5]])
ridge_coef <- cbind(ridge_coef1, ridge_coef2, ridge_coef3,
ridge_coef4, ridge_coef5)
avg_coefs_ridge <- apply(ridge_coef, 1, mean)
#avg_coefs_ridge <- avg_coefs_ridge[names(avg_coefs_ridge) != "(Intercept)" & avg_coefs_ridge != 0]
#med_avg_coefs_ridge <- round(avg_coefs_ridge/median(avg_coefs_ridge))

# Find predicted probabilities on long imputed data (no rounding applied in this case!)
trach_df_long <- mice::complete(trach_df_mice_out,action="long")
x_vars <- model.matrix(Trach ~ ., trach_df_long)[,-c(2,3)]
trach_df_long$ridge_score <- x_vars %*% avg_coefs_ridge
mod_ridge <- glm(Trach~ ridge_score, data = trach_df_long, family = "binomial")
predict_probs_ridge <- predict(mod_ridge, type="response")
```

```{r, warning=FALSE, message=FALSE, echo = FALSE, include=FALSE}
# plot predicted probabilities from the regression models
log_prob_plot <- ggplot() + 
  geom_histogram(aes(x=predict_probs_logistic, fill=as.factor(mod_logistic$y)),
                bins=30) + scale_fill_discrete(name="Tracheostomy") + 
  labs(x="Predicted Probabilities", y="Count", title ="Logistic Regression Model     Predicted Probabilities")

lasso_prob_plot <-ggplot() + 
  geom_histogram(aes(x=predict_probs_lasso, fill=as.factor(mod_lasso$y)),
                bins=30) + scale_fill_discrete(name="Tracheostomy") + 
  labs(x="Predicted Probabilities", y="Count", title ="Lasso Regression Model         Predicted Probabilities")

ridge_prob_plot <-ggplot() + 
  geom_histogram(aes(x=predict_probs_ridge, fill=as.factor(mod_ridge$y)),
                bins=30) + scale_fill_discrete(name="Tracheostomy") + 
  labs(x="Predicted Probabilities", y="Count", title ="Ridge Regression Model      Predicted Probabilities")
grid.arrange(log_prob_plot, lasso_prob_plot, ridge_prob_plot, nrow = 1, ncol = 3)
```

#### **Model Performance and Calibration**

Models were evaluated using discrimination to assess the model's ability to differentiate between positive and negative outcomes. This evaluation included plotting the receiving operating characteristic curve (ROC), calculating the sensitivity, specificity, positive predicted values, negative predicted values and, overall accuracy for predicting tracheostomy placement. The sensitivity, specificity, positive predicted values, negative predicted values and, overall accuracy were calculated by using the threshold obtained from ROC curves from each model to create predicted classes for the response. The models were calibrated using predicted outcome probabilities to help assess reliability or, how well the predicted probabilities of an event match the observed outcome. The predicted outcome probabilities were obtained using the predict() function. Brier score performance was used to measure the accuracy of the predicted probabilities. This measure further helps to assess how well each model's predicted outcome aligns with the actual observed values.

From Table 8: Regression Coeﬀiecient Comparison, we observe that the values for coeﬀicientsin logistic regression are generally larger than those in lasso and ridge regressions. This discrepancy arises because the regularization terms in lasso and ridge penalize large coeﬀicients.The AUC-ROC plots were used to visualize and determine the model's ability to discriminate differentiate between tracheostomy placement and no tracheostomy placement. A higher AUC score is associated with better discrimination. Here,the logistic model had the highest AUC score (0.933). In Table 9: Model Perfomance Meausre, we observe the sensitivitiy, specificity, PPV, NPV, and accuracy values for each model. From the calibration plots, the logistic and lasso models seem to have more points aligned the perfect calibration diagonal line compared to ridge however, the logistic appears to have a better model calibration. From Table 10: Brier Score Measures, we observed the logistic model achieved lowest Brier Score (0.065). The lower the Brier Score, the better the model's performance.12

```{r, warning=FALSE, message=FALSE, echo = FALSE}
# data frame for regression coefficients
coeff_df <- data.frame(coefs_logistic = avg_coefs_logistic,
                       coefs_lasso =avg_coefs_lasso,
                       coefs_ridge = avg_coefs_ridge)

# output table for regression coefficients
kable(coeff_df, caption = "Regression Coefficient Comparisons", align = "l",digits = 3)

# performance evaluation using discrimination, ROC Curve
par(mfrow=c(1,3))

roc_mod_logistic <- roc(predictor=predict_probs_logistic, type="response", 
                    response=as.factor(trach_df_long$Trach), 
                    levels = c(0,1), direction = "<")
plot(roc_mod_logistic, print.auc=TRUE, print.thres = TRUE, main=list("Logistic ROC Curve"))

roc_mod_lasso <- roc(predictor=predict_probs_lasso,
response=as.factor(trach_df_long$Trach),
levels = c(0,1), direction = "<")
plot(roc_mod_lasso, print.auc=TRUE, print.thres = TRUE, main=list("Lasso ROC Curve"))
     
roc_mod_ridge <- roc(predictor=predict_probs_ridge,
response=as.factor(trach_df_long$Trach),
levels = c(0,1), direction = "<")
plot(roc_mod_ridge, print.auc=TRUE, print.thres = TRUE, main=list("Ridge ROC Curve"))

# 
pred_ys_logistic <- ifelse(predict_probs_logistic > 0.166, 1, 0)
tab_outcome_logistic <- table(trach_df_long$Trach, pred_ys_logistic)
pred_ys_lasso <- ifelse(predict_probs_lasso > 0.190, 1, 0)
tab_outcome_lasso <- table(trach_df_long$Trach, pred_ys_lasso)
pred_ys_ridge <- ifelse(predict_probs_ridge > 0.132, 1, 0)
tab_outcome_ridge <- table(trach_df_long$Trach, pred_ys_ridge)

# logistic performance evaluation measures 
sens_log <- tab_outcome_logistic[2,2]/(tab_outcome_logistic[2,1]+tab_outcome_logistic[2,2])
spec_log <- tab_outcome_logistic[1,1]/(tab_outcome_logistic[1,1]+tab_outcome_logistic[1,2])
ppv_log <- tab_outcome_logistic[2,2]/(tab_outcome_logistic[1,2]+tab_outcome_logistic[2,2])
npv_log <- tab_outcome_logistic[1,1]/(tab_outcome_logistic[1,1]+tab_outcome_logistic[2,1])
acc_log <- (tab_outcome_logistic[1,1]+tab_outcome_logistic[2,2])/sum(tab_outcome_logistic)
#rbind(round(c(sens_log, spec_log, ppv_log, npv_log, acc_log), 3))

# lasso performance evaluation measures 
sens_lasso <- tab_outcome_lasso[2,2]/(tab_outcome_lasso[2,1]+tab_outcome_lasso[2,2])
spec_lasso <- tab_outcome_lasso[1,1]/(tab_outcome_lasso[1,1]+tab_outcome_lasso[1,2])
ppv_lasso <- tab_outcome_lasso[2,2]/(tab_outcome_lasso[1,2]+tab_outcome_lasso[2,2])
npv_lasso <- tab_outcome_lasso[1,1]/(tab_outcome_lasso[1,1]+tab_outcome_lasso[2,1])
acc_lasso <- (tab_outcome_lasso[1,1]+tab_outcome_lasso[2,2])/sum(tab_outcome_lasso)
#rbind(round(c(sens_lasso, spec_lasso, ppv_lasso, npv_lasso, acc_lasso), 3))

# ridge performance evaluation measures 
sens_ridge <- tab_outcome_ridge[2,2]/(tab_outcome_ridge[2,1]+tab_outcome_ridge[2,2])
spec_ridge <- tab_outcome_ridge[1,1]/(tab_outcome_ridge[1,1]+tab_outcome_ridge[1,2])
ppv_ridge <- tab_outcome_ridge[2,2]/(tab_outcome_ridge[1,2]+tab_outcome_ridge[2,2])
npv_ridge <- tab_outcome_ridge[1,1]/(tab_outcome_ridge[1,1]+tab_outcome_ridge[2,1])
acc_ridge <- (tab_outcome_ridge[1,1]+tab_outcome_ridge[2,2])/sum(tab_outcome_ridge)
#rbind(round(c(sens_ridge, spec_ridge, ppv_ridge, npv_ridge, acc_ridge), 3))

# data frame for model performance measures
measures <- data.frame(Model = c("Logistic", "Lasso", "Ridge"),
  Sensitivity = (round(c(sens_log, sens_lasso, sens_ridge), 3)),
  Specificity = (round(c(spec_log, spec_lasso, spec_ridge), 3)),
  PPV = (round(c(ppv_log, ppv_lasso, ppv_ridge), 3)),
  NPV = (round(c(npv_log, npv_lasso, npv_ridge), 3)),
  Accuracy = (round(c(acc_log, acc_lasso, acc_ridge), 3)))

# output table for model performance measures 
#measures %>%
#mutate_all(linebreak) %>%
#kbl(caption = "Model Performance Measures",
#col.names=linebreak(c("Model", "Sensitivity", "Specificity", "Positive Predictive Values",
#                      "Negative Predictive Values", "Overall Accuracy")),
#booktabs=T, escape=F, align = "c") %>%
#kable_styling(full_width = FALSE, latex_options = c('hold_position'))
kable(measures, caption = "Model Performance Measures", align = "l",digits = 3)

num_cuts <- 10

# logistic calibration metrics
log_calib_data <- data.frame(prob = predict_probs_logistic,
                         bin = cut(predict_probs_logistic, breaks = num_cuts),
                         class = trach_df_long$Trach)
log_calib_data <- log_calib_data %>%
  group_by(bin) %>%
  summarize(observed = sum(as.numeric(as.character(class)))/n(),
            expected = sum(prob)/n(),
            se = sqrt(observed*(1-observed)/n()))

# calibration plot for logistic        
log_calib_plot <- ggplot(log_calib_data) + 
  geom_abline(intercept = 0, slope = 1, color="red") + 
  geom_errorbar(aes(x = expected, ymin=observed-1.96*se, 
                    ymax=observed+1.96*se), 
                colour="black", width=.01)+
  geom_point(aes(x = expected, y = observed)) +
  labs(x="Expected Proportion", y="Observed Proportion", title = "Logistic") +
  theme_minimal()

# lasso calibration metrics
lasso_calib_data <- data.frame(prob = predict_probs_lasso,
                         bin = cut(predict_probs_lasso, breaks = num_cuts),
                         class = trach_df_long$Trach)
lasso_calib_data <- lasso_calib_data %>%
  group_by(bin) %>%
  summarize(observed = sum(as.numeric(as.character(class)))/n(),
            expected = sum(prob)/n(),
            se = sqrt(observed*(1-observed)/n()))

# calibration plot for lasso        
lasso_calib_plot <- ggplot(lasso_calib_data) + 
  geom_abline(intercept = 0, slope = 1, color="red") + 
  geom_errorbar(aes(x = expected, ymin=observed-1.96*se, 
                    ymax=observed+1.96*se), 
                colour="black", width=.01)+
  geom_point(aes(x = expected, y = observed)) +
  labs(x="Expected Proportion", y="Observed Proportion", title = "Lasso") +
  theme_minimal()

# ridge calibration metrics
ridge_calib_data <- data.frame(prob = predict_probs_ridge,
                         bin = cut(predict_probs_ridge, breaks = num_cuts),
                         class = trach_df_long$Trach)
ridge_calib_data <- ridge_calib_data %>%
  group_by(bin) %>%
  summarize(observed = sum(as.numeric(as.character(class)))/n(),
            expected = sum(prob)/n(),
            se = sqrt(observed*(1-observed)/n()))

# calibration plot for ridge        
ridge_calib_plot <- ggplot(ridge_calib_data) + 
  geom_abline(intercept = 0, slope = 1, color="red") + 
  geom_errorbar(aes(x = expected, ymin=observed-1.96*se, 
                    ymax=observed+1.96*se), 
                colour="black", width=.01)+
  geom_point(aes(x = expected, y = observed)) +
  labs(x="Expected Proportion", y="Observed Proportion", title = "Ridge") +
  theme_minimal()

grid.arrange(log_calib_plot, lasso_calib_plot, ridge_calib_plot, nrow = 1, ncol = 3)
```

```{r, warning=FALSE, message=FALSE, echo = FALSE}
# performance evaluation using Brier Score
b1 <- BrierScore(as.numeric(as.character(trach_df_long$Trach)), predict_probs_logistic)
b2 <- BrierScore(as.numeric(as.character(trach_df_long$Trach)), predict_probs_lasso)
b3 <- BrierScore(as.numeric(as.character(trach_df_long$Trach)), predict_probs_ridge)
brier <- data.frame(Models = c("Logistic", "Lasso", "Ridge"),
  BrierScore = (round(c(b1, b2, b3), 3)))
  
#output table performance evaluation using Brier Score 
#brier %>%
#mutate_all(linebreak) %>%
#kbl(caption = "Brier Score Measures",
#col.names=linebreak(c("Model", "Brier Score")),
#booktabs=T, escape=F, align = "c") %>%
#kable_styling(full_width = FALSE, latex_options = c('hold_position'))
kable(brier, caption = "Brier Score Measures", align = "l",digits = 3)
```

## Conclusion

The results of this regression analysis provide insights into the prediction of tracheostomy among infants diagnosed with severe bronchopulmonary dysplasia (BPD). Given the vulnerability of the patient population and the risk associated with a tracheostomy, it is important to develop a model that can accurately predict the potential need for invasive ventilation support. After fitting the logistic, lasso, and ridge models on the overall average regression coefficients from the imputed data sets, the logistic model appears to perform the best when predicting the observed outcome. We were able to assess the reliability and accuracy of these models using discrimination techniques and calibration methods. This study has some limitations. In the data set, there were very few observed outcomes for tracheostomy and death and we do not know when the tracheostomy was performed. In addition, we did not focus on the death outcome in this study because the cause of death is uncertain. Significant missingness for predictors of interest was another limitation in the study. The multiple imputation method was used to impute missing variables. Some of the regression model functions included cross-validation and we did implement calibration on the predicted probabilities however, it is helpful to have a independent test set to evaluate the final model's performance on unseen data before considering the model for clinical applications in a real-world setting. In this study, we did not split the data into a training set and test set for validation. However, this analysis can potentially be reproduced and improved for future studies by splitting the data and performing validation to assess how well the model performs on unseen data. Furthermore, external validation on another data set to evaluate the generalizability of the model or the model's ability to be applied outside the clinical setting could also be considered.

\newpage

## References

1.  Association, A. L. (n.d.). *Learn About Bronchopulmonary Dysplasia*. Www.lung.org. <https://www.lung.org/lung-health-diseases/lung-disease-lookup/bronchopulmonary-dysplasia/learn-about-bpd#:~:text=Key%20Facts>

2.  *Newborn Breathing Conditions - Bronchopulmonary Dysplasia (BPD) \| NHLBI, NIH*. (n.d.). Www.nhlbi.nih.gov. <https://www.nhlbi.nih.gov/health/bronchopulmonary-dysplasia>

3.  Milenka Cuevas Guamán, Nikou Pishevar, Abman, S. H., Keszler, M., Truog, W. E., Panitch, H. B., & Nelin, L. D. (2021). Invasive mechanical ventilation at 36 weeks post-menstrual age, adverse outcomes with a comparison of recent definitions of bronchopulmonary dysplasia. *Journal of Perinatology*, *41*(8), 1936--1942. <https://doi.org/10.1038/s41372-021-01102-w>

4.  Miller, A. N., Shepherd, E. G., Manning, A., Shamim, H., Chiang, T., El-Ferzli, G. T., & Nelin, L. D. (2023). Tracheostomy in Severe Bronchopulmonary Dysplasia---How to Decide in the Absence of Evidence. *Biomedicines*, *11*(9), 2572--2572. <https://doi.org/10.3390/biomedicines11092572>

5.  *Tracheostomy*. (2023, April 11). Www.hopkinsmedicine.org. <https://www.hopkinsmedicine.org/health/treatment-tests-and-therapies/tracheostomy#:~:text=Tracheostomy%20is%20a%20procedure%20to>

6.  Baraldi, A. N., & Enders, C. K. (2010). An introduction to modern missing data analyses. Journal of School Psychology, 48(1), 5--37. https://doi.org/10.1016/j.jsp.2009.10.001

7.   Canvas

8.  https://github.com/destinyr2/Project2.git

\newpage

# Code Appendix

```{r ref.label=knitr::all_labels(), echo=TRUE, eval=FALSE, include=TRUE}
```
